'use strict'
// 腾讯云短信模块
const superAgent = require('superagent')
const sha256 = require('sha256')
const _ = require('lodash')

var qcloudHelper = {
  qcloudConfig: {},
  sendSingleMsg: function singleMsg (smsParams) {
    return sendMsg('singleMsg', smsParams)
  },
  sendTemplateMsg: function templateMsg (smsParams) {
    return sendMsg('templateMsg', smsParams)
  },
  sendMultiMsg: function sendMultiMsg (smsParams) {
    return sendMsg('multiMsg', smsParams)
  },
  sendMultiTemplateMsg: function multiTemplateMsg (smsParams) {
    return sendMsg('multiTemplateMsg', smsParams)
  }
}
function sendMsg (msgType, smsParams) {
  return new Promise((resolve, reject) => {
    if (_.isEmpty(qcloudHelper.qcloudConfig)) {
      return reject({
        code: 404,
        message: '缺失腾讯云相关参数'
      })
    }
    if (validateQcloudParams(qcloudHelper.qcloudConfig)) {
      if (validateSMSParams(smsParams, msgType)) {
        let random = parseInt(Math.random() * Math.pow(2, 32))
        let time = parseInt(Date.now() / 1000)
        let url = 'https://yun.tim.qq.com/v5/tlssmssvr/sendsms?sdkappid=' + qcloudHelper.qcloudConfig.sdkappid + '&random=' + random
        let mobile = smsParams.tel.mobile
        if (msgType === 'multiMsg' || msgType === 'multiTemplateMsg') {
          url = 'https://yun.tim.qq.com/v5/tlssmssvr/sendmultisms2?sdkappid=' + qcloudHelper.qcloudConfig.sdkappid + '&random=' + random
          mobile = _.reduce(smsParams.tel, (result, item) => {
            result.push(item.mobile)
            return result
          }, []).join(',')
        }
        console.log(`appkey=${qcloudHelper.qcloudConfig.appkey}&random=${random}&time=${time}&mobile=${mobile}`)
        let data = {
          'tel': smsParams.tel,
          'time': time,
          'sig': sha256(`appkey=${qcloudHelper.qcloudConfig.appkey}&random=${random}&time=${time}&mobile=${mobile}`),
          'extend': smsParams.extend || '',
          'ext': smsParams.ext || ''
        }
        if (msgType === 'singleMsg' || msgType === 'multiMsg') {
          data = Object.assign(data, {  'type': smsParams.type, 'msg': smsParams.msg})
        } else if (msgType === 'templateMsg' || msgType === 'multiTemplateMsg') {
          data = Object.assign(data, {  'sign': smsParams.sign || '',  'tpl_id': smsParams.tplId, 'params': smsParams.params})
        }
        return qcloudSendMsg(url, data).then(result => {
          if (JSON.parse(result.text).result === 0) {
            return resolve(result)
          }else {
            return reject(result.body)
          }
        })
          .catch(err => reject(err))
      }
    }
  })
}

function qcloudSendMsg (url, data) {
  console.debug('url: ' + url)
  console.debug('data: ' + JSON.stringify(data))
  return new Promise((resolve, reject) => {
    return superAgent.post(url)
      .send(data)
      .set('content-type', 'application/json')
      .set('Accept', 'application/json')
      .end((err, result) => {
        if (err) {
          console.error(err)
          return reject(err)
        }
        return resolve(result)
      })
  })
}

function validateSMSParams (smsParams, msgType) {
  console.trace(' >>>>>>>> 开始验证短信必要参数 <<<<<<<< ')
  if (smsParams.tel === undefined || _.isEmpty(smsParams.tel)) {
    throw new Error('缺失手机号码参数 tel !')
  }
  if (msgType === 'singleMsg' && smsParams.type === undefined) {
    throw new Error('缺失短信类型 type 0:普通短信; 1:营销短信 !')
  }
  if (msgType === 'singleMsg' && smsParams.msg === undefined) {
    throw new Error('缺失短信内容 !')
  }
  if (msgType === 'templateMsg' && smsParams.tplId === undefined) {
    throw new Error('缺失短信模板id !')
  }
  if (msgType === 'templateMsg' && (smsParams.params === undefined || _.isEmpty(smsParams.params))) {
    throw new Error('缺失短信参数 params!')
  }
  console.trace(' >>>>>>>> 短信必要参数验证通过! <<<<<<<< ')
  return true
}

function validateQcloudParams (qcloudParams) {
  console.trace(' >>>>>>>> 开始验证腾讯云参数 <<<<<<<< ')
  if (!qcloudParams.sdkappid) {
    throw new Error('缺失腾讯云 sdkappid !')
  }
  if (!qcloudParams.appkey) {
    throw new Error('缺失腾讯云 appkey !')
  }
  console.trace(' >>>>>>>> 腾讯云参数验证通过! <<<<<<<< ')
  return true
}

module.exports = qcloudHelper
